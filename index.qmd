---
title: "Homework 4"
format: html
toc: TRUE
editor_options: 
  chunk_output_type: inline
---

---
title: "Homework 4 – Task 1"
format: html
---

# Task - 1

1.  If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\
    ../MyData.csv

2.  What are the major benefits of using R projects?\
    \> R Projects keep your working directory consistent, organize all files/code/data in one place, and make your analysis reproducible.\
    \> They also help with version control, collaboration, and avoiding path errors since everything is relative to the project folder.

3.  What is git and what is github?\
    \> Git is a version control system that tracks changes in code and allows you to manage different versions.\
    \> GitHub is a cloud-based platform that hosts git repositories, making it easier to collaborate, share, and back up code.

4.  What are the two main differences between a tibble and a data.frame?\
    \> (1) Tibbles print in a cleaner format, showing only the first 10 rows and fitting the screen width.\
    \> (2) Tibbles do not automatically convert strings to factors, while data.frames often do.

5.  Rewrite the following nested function call using Base R’s chaining operator:

    ```{r}
    library(tidyverse)
    iris |>
      as_tibble() |>
      select(starts_with("Petal"), Species) |>
      filter(Petal.Length < 1.55) |>
      arrange(Species)


    ```

---
title: "Glass Data"
format: html
---

# Task - 2

## Part A- Glass Data

1.  

```{r}
library(tidyverse)

# Read the Glass dataset directly from URL
glass <- read_csv(
  "https://www4.stat.ncsu.edu/~online/datasets/glass.data",
  col_names = c("Id","RI","Na","Mg","Al","Si","K","Ca","Ba","Fe","Type_of_glass")
)

# Print tibble
glass
```

2.  

```{r}
glass <- glass %>%
  mutate(Type_of_glass = case_when(
    Type_of_glass == 1 ~ "building_windows_float_processed",
    Type_of_glass == 2 ~ "building_windows_non_float_processed",
    Type_of_glass == 3 ~ "vehicle_windows_float_processed",
    Type_of_glass == 4 ~ "vehicle_windows_non_float_processed",
    Type_of_glass == 5 ~ "containers",
    Type_of_glass == 6 ~ "tableware",
    Type_of_glass == 7 ~ "headlamps"
  ))

glass
```

3.  

```{r}
glass_filtered <- glass %>%
  filter(Fe < 0.2 & Type_of_glass %in% c("tableware", "headlamps"))

glass_filtered
```

---
title: "Yeast Data"
format: html
---

# Part B : Yeast Data

1.  

```{r}
yeast <- read_table(
  "https://www4.stat.ncsu.edu/~online/datasets/yeast.data",
  col_names = c("seq_name","mcg","gvh","alm","mit","erl","pox","vac","nuc","class")
)

yeast
```

2.  

```{r}
yeast <- yeast %>% select(-seq_name, -nuc)

yeast
```

3.  

```{r}
yeast_summary <- yeast %>%
  group_by(class) %>%
  summarise(across(
    c(mcg, gvh, alm, mit, erl, pox, vac),
    list(mean = mean, median = median)
  ))

yeast_summary
```

---
title: "Wine Data"
format: html
---

# Task 3 : Combining Excel and Delimited Data

1.  Import White Wine Excel Data

```{r}
library(readxl)
library(tidyverse)

# Read first sheet
white <- read_excel("white-wine.xlsx", sheet = 1)

# Print tibble
white
```

2.  Fix Varibale names

```{r}
# Read the alternative variable names
names_fix <- read_excel("white-wine.xlsx", sheet = 2)[[1]]

# Overwrite column names
colnames(white) <- names_fix

# Add column to mark wine type
white <- white %>% mutate(type = "white")

white
```

3.  Import Red Wine CSV Data

```{r}
# Read semi-colon delimited red wine data
red <- read_delim(
  "https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv",
  delim = ";"
)

# Fix column names
colnames(red) <- names_fix

# Add column to mark wine type
red <- red %>% mutate(type = "red")

red
```

4.  Combine White and Red Wine Data

```{r}
# Read semi-colon delimited red wine data
red <- read_delim(
  "https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv",
  delim = ";"
)

# Fix column names
colnames(red) <- names_fix

# Add column to mark wine type
red <- red %>% mutate(type = "red")

red
```

5.  Filter for high quality and reasonable alcohol

```{r}
# Combine white and red into one tibble
wine <- dplyr::bind_rows(white, red)

# Print to check result
wine

```

6.  Sort by Quality (High -\> Low)

```{r}
wine_filtered <- wine %>%
  filter(quality > 6.5, alcohol < 132)

wine_filtered

```

7.  Keep only Acid Variables, Alcohol, Type, Quality

```{r}
wine_sorted <- wine_filtered %>%
  arrange(desc(quality))

wine_subset <- wine_sorted %>%
  select(contains("acid"), alcohol, type, quality)

wine_subset

```

8.  Add Mean and Standard Deviation of Alcohol - by quality

```{r}
wine_summary <- wine_subset %>%
  group_by(quality) %>%
  mutate(
    mean_alcohol = mean(alcohol),
    sd_alcohol = sd(alcohol)
  )

wine_summary

```

9.  

```{r}
wine_summary <- wine_subset %>%
  group_by(quality) %>%
  summarise(
    mean_alcohol = mean(alcohol),
    sd_alcohol = sd(alcohol),
    .groups = "drop"
  )

wine_summary
```
